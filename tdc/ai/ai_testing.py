import os
import openai
import json
import requests
from dotenv import load_dotenv
import tiktoken

class AiTesting:
    def __init__(self):
        self.response = None
        self.model = "gpt-3.5-turbo"
        self.role = "user"
        self.client = None
        self.thread = None
        load_dotenv()

    # Função para carregar a especificação Swagger (OpenAPI)
    def load_swagger(self, swagger_path):
        with open(swagger_path, 'r') as file:
            swagger = json.load(file)
        return swagger

    # Função para gerar testes usando a API da OpenAI
    def generate_tests(self, swagger_spec, host):
        print('')
        print('Starting to generate tests by OpenAI...')
        prompt = f"""Create API tests in Python using pytest, 
                  however I would like only testing code to put in a file and 
                  I dont need explanation about it, and 
                  the host for testing is {host}, and 
                  tests must not be parametrized and 
                  tests must have one test by def, and 
                  however you must create only test of methods in the swagger specification bellow,
                  My swagger specification is: {json.dumps(swagger_spec)}

                    And id atributte I dont need to inform, because the id is generated by the server, and
                    And if there is method get in the swagger, you must create a test for it with a post before and use the id for it
                    And it does not clean the database.
                    """
        enc = tiktoken.encoding_for_model("gpt-3.5-turbo")
        qty_token = enc.encode(prompt)
        print('Token number prediction: ' + str(len(qty_token)))

        self.client = openai.OpenAI()

        assistant = self.client.beta.assistants.create(
            name="Automation Tester Assistant",
            instructions="Act like a test automation engineer, and developing a api test automated",
            tools=[{"type": "code_interpreter"}],
            model="gpt-3.5-turbo",
            temperature=0
        )

        self.thread = self.client.beta.threads.create()

        message = self.client.beta.threads.messages.create(
            thread_id=self.thread.id,
            role="user",
            content=prompt,
        )

        run = self.client.beta.threads.runs.create_and_poll(
            thread_id=self.thread.id,
            assistant_id=assistant.id,
            instructions="Please address the user as Robson Agapito. The user has a premium account.",
        )

        print("Run completed with status by OpenAI: " + run.status)

        # if run.status == "completed":
        #     messages = self.client.beta.threads.messages.list(thread_id=self.thread.id)

        #     print("messages: ")
        #     for message in messages:
        #         assert message.content[0].type == "text"
        #         print({"role": message.role, "message": message.content[0].text.value})
        #         print("===========================================")

        self.client.beta.assistants.delete(assistant.id)
        self.create_testing_file("test_customer.py")
        print('')
    
    def get_last_file_id(self):
        print('Getting last file id...')
        headers = {"Authorization": f"Bearer {os.getenv('OPENAI_API_KEY')}"}
        response = requests.get("https://api.openai.com/v1/files", headers=headers)
        respJson = response.json()
        file_id = respJson['data'][0]['id']
        return file_id

    def create_testing_file(self, file_name):
        print('Creating testing file...')
        file_data = self.client.files.content(self.get_last_file_id())
        file_data_bytes = file_data.read()
        path = './tests/' + file_name
        with open(path, "wb") as file:
            file.write(file_data_bytes)
        print('Testing file created >> ' + path)    